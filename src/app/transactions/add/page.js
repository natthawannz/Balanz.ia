"use client";
import { useState, useEffect } from 'react';
import Link from 'next/link';
// üëà NEW IMPORT: Import the CategoryPopup component
import CategoryPopup from './CategoryPopup'; 

export default function AddTransaction() {
  const [formData, setFormData] = useState({
    amount: '',
    type: 'expense',
    category: '',
    date: new Date().toISOString().split('T')[0],
    notes: '',
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const [transcript, setTranscript] = useState('');
  const [recognition, setRecognition] = useState(null);
  const [isSpeechSupported, setIsSpeechSupported] = useState(false);
  // Slip upload + OCR removed for simplified UX
  const [categories, setCategories] = useState([]);
  const [newCategory, setNewCategory] = useState('');
  const [selectedIcon, setSelectedIcon] = useState('üçΩÔ∏è');
  const [newCategoryType, setNewCategoryType] = useState('expense');
  const [showAddCategoryModal, setShowAddCategoryModal] = useState(false);
  const [selectedCategoryGroup, setSelectedCategoryGroup] = useState('‡∏™‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ');


  const availableIcons = [
    { value: ['üí°', 'üö∞', 'üî•', 'üì∂', 'üõ¢Ô∏è', 'üîå', 'üì°', 'üíß', '‚ö°'], label: '‡∏™‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ' },
    { value: ['üöó', '‚õΩ', 'üöô', 'üÖøÔ∏è', 'üö¶', 'üöò', 'üõ£Ô∏è', 'üöñ', 'üîß'], label: '‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå' },
    { value: ['üí∞', 'üìà', 'üè¶', 'üí≥', 'üíµ', 'üí∏', 'üßæ', 'üí∑', 'üíé'], label: '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô' },
    { value: ['üë®‚Äçüë©‚Äçüëß‚Äçüë¶', 'üçº', 'üéí', 'üß∏', 'üë∂', 'üëß', 'üë¶', 'üè°', 'üë©‚Äçüçº'], label: '‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡πá‡∏Å' },
    { value: ['üõçÔ∏è', 'üéÅ', 'üëó', 'üëü', 'üíÑ', '‚åö', 'üëí', 'üëú', 'üíç', 'üëï'], label: '‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á' },
    { value: ['üçΩÔ∏è', 'üçπ', 'üçî', 'üçú', 'üçï', 'ü•ó', 'ü•©', 'üç±', 'üç©', 'üçä'], label: '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°' },
    { value: ['üéì', 'üìö', 'üñäÔ∏è', 'üè´', 'üìñ', '‚úèÔ∏è', 'üìí', 'üßÆ', 'üßë‚Äçüè´', 'üìé'], label: '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤' },
    { value: ['üé¨', 'üéµ', 'üéÆ', 'üì∫', 'üé§', 'üéß', 'üé®', 'üé≤', 'üé∑', 'üì∏'], label: '‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á' },
    { value: ['ü©∫', 'üíä', 'üè•', 'üßò', 'ü•ó', 'ü©π', 'üß¥', '‚öïÔ∏è', 'üöë'], label: '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û' },
    { value: ['üì¶', 'üß∞', 'üìå', 'üîë', 'üóÇÔ∏è', '‚úÇÔ∏è', 'üìé', 'üî®', 'üßæ'], label: '‡πÄ‡∏ö‡πá‡∏î‡πÄ‡∏ï‡∏•‡πá‡∏î' },
    { value: ['üè†', 'üõãÔ∏è', 'ü™ë', 'üö™', 'üñºÔ∏è', 'üõèÔ∏è', 'üßπ'], label: '‡∏ö‡πâ‡∏≤‡∏ô' },
    { value: ['üê∂', 'üê±', 'üêæ', 'üêü', 'ü¶ú', 'üêá', 'üê¢', 'üêï', 'üêà', 'ü¶é'], label: '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á' },
    { value: ['üöå', 'üöÜ', 'üö≤', 'üöï', 'üö§', 'üöâ', 'üöÑ', 'üöù', 'üöç', 'üõ∫'], label: '‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á' },
    { value: ['‚úàÔ∏è', 'üó∫Ô∏è', 'üèñÔ∏è', 'üèîÔ∏è', 'üõ≥Ô∏è', 'üõ©Ô∏è', 'üèùÔ∏è', 'üõ§Ô∏è', 'üóΩ', 'üèØ'], label: '‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß' },
    { value: ['ü§≤', '‚ù§Ô∏è', 'üôè', 'üéóÔ∏è', 'üïäÔ∏è', 'üíù', 'üì¶', 'üç≤', 'üíü'], label: '‡∏ö‡∏£‡∏¥‡∏à‡∏≤‡∏Ñ' },
    { value: ['üß¥', 'üëï', 'ü©≥', 'üëü', 'üßº', 'üß¥', 'üíÖ', 'üß¢'], label: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß' },
    { value: ['üè®', 'üõèÔ∏è', 'üõéÔ∏è', 'üß≥', 'üö™', 'üçΩÔ∏è', 'üõãÔ∏è', 'üè©', 'üõÅ'], label: '‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°' },
    { value: ['üå≥', 'üåª', 'ü™¥', 'üåπ', 'üåø', 'üçÄ', 'üå≤', 'üåº', 'ü™µ', 'üå±'], label: '‡∏à‡∏±‡∏î‡∏™‡∏ß‡∏ô' },
    { value: ['‚öΩ', 'üèÄ', 'üèãÔ∏è', 'üèä', 'üö¥', 'üéæ', 'üèê', 'ü•ä', '‚õ≥', 'üè∏'], label: '‡∏Å‡∏µ‡∏¨‡∏≤' },
    { value: ['üíû', 'üíå', 'üåπ', 'ü•Ç', 'üíç', 'üë©‚Äç‚ù§Ô∏è‚Äçüë®', 'üë©‚Äç‚ù§Ô∏è‚Äçüë©', 'üë®‚Äç‚ù§Ô∏è‚Äçüë®', '‚ù§Ô∏è', 'üòò'], label: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô-‡∏Ñ‡∏ô‡∏£‡∏±‡∏Å' },
    { value: ['üíª', 'üñ•Ô∏è', '‚å®Ô∏è', 'üñ±Ô∏è', 'üì±', 'üì°', 'ü§ñ', 'üíæ', 'üïπÔ∏è', 'üîã'], label: '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ/‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•' },
    { value: ['üíº', 'üóÇÔ∏è', 'üìä', 'üìÖ', 'üñäÔ∏è', 'üìá', 'üì†', 'üè¢', 'üßë‚Äçüíº', 'üóÉÔ∏è'], label: '‡∏á‡∏≤‡∏ô/‡∏≠‡∏≤‡∏ä‡∏µ‡∏û' },
    { value: ['üì∏', 'üé®', 'üé≠', 'üéπ', 'üñåÔ∏è', 'üé§', 'üéß', 'üßµ', 'üéØ', 'üì∑'], label: '‡∏®‡∏¥‡∏•‡∏õ‡∏∞/‡∏á‡∏≤‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå' },
    { value: ['üéÇ', 'üéâ', 'üéä', 'üéà', 'üç∞', 'ü•Ç', 'üçæ', 'üéá', 'üéÜ', 'üçª'], label: '‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á/‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•' },
    { value: ['üìñ', 'üì∞', '‚úèÔ∏è', 'üìë', 'üìù', 'üìì', 'üìí', 'üìö', 'üìî', 'üñãÔ∏è'], label: '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ/‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°' },
    { value: ['üß≥', 'üöñ', 'üöâ', 'üõ´', 'üõ¨', 'üö¢', 'üöÑ', 'üö≤', 'üöô', 'üõ£Ô∏è'], label: '‡πÇ‡∏•‡∏à‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡∏™‡πå/‡∏Å‡∏≤‡∏£‡∏Ç‡∏ô‡∏™‡πà‡∏á' },
    { value: ['üí§', 'üõå', 'üõÅ', 'üßº', 'ü™ë', 'üïØÔ∏è', 'üßñ', 'üì∫', 'üéß'], label: '‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô' },
    { value: ['üßë‚Äçüç≥', 'ü•ó', 'üç±', 'ü•ò', 'üç≤', 'üç≥', 'ü•©', 'ü•ñ', 'üçú', 'üçï'], label: '‡∏Ñ‡∏£‡∏±‡∏ß/‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∏‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£' },
  ];

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (!token) {
      window.location.href = '/login';
    } else {
      setIsLoggedIn(true);
      fetchCategories(token);
    }

    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (SpeechRecognition) {
      const recog = new SpeechRecognition();
      recog.lang = 'th-TH';
      recog.interimResults = true;
      recog.continuous = true;
      setRecognition(recog);
      setIsSpeechSupported(true);
    }
  }, []);

  const fetchCategories = async (token) => {
    try {
      const res = await fetch('http://localhost:5000/api/categories', {
        headers: { Authorization: `Bearer ${token}` },
      });
      const data = await res.json();
      if (res.ok) {
        let updatedCategories = data || [];
        setCategories(updatedCategories);
        
        // Try to set the category field only if the form's current category is empty
        if (!formData.category) {
            const defaultCat = updatedCategories.find(cat => cat.type === formData.type) || updatedCategories[0];
            if (defaultCat) {
              setFormData(prev => ({ ...prev, category: defaultCat._id }));
            }
        }
      } else {
        setError(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
        setCategories([]);
      }
    } catch (error) {
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: ' + error.message);
      setCategories([]);
    }
  };

  const addCategory = async () => {
    if (newCategory.trim()) {
      const isDuplicate = categories.some(
        (cat) =>
          cat.name.toLowerCase() === newCategory.trim().toLowerCase() &&
          cat.type === newCategoryType
      );
      if (!isDuplicate) {
        try {
          const token = localStorage.getItem('token');
          const res = await fetch('http://localhost:5000/api/categories', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ name: newCategory.trim(), icon: selectedIcon, type: newCategoryType }),
          });
          const data = await res.json();
          if (res.ok) {
            await fetchCategories(token);
            setNewCategory('');
            setSelectedIcon('üçΩÔ∏è');
            setNewCategoryType('expense');
            setShowAddCategoryModal(false);
          } else {
            setError(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
          }
        } catch (error) {
          setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
        }
      } else {
        setError('‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ô‡∏µ‡πâ');
      }
    } else {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
    }
  };

  const deleteCategory = async (categoryId) => {
    const token = localStorage.getItem('token');
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const budgetRes = await fetch('http://localhost:5000/api/budgets', {
        headers: { Authorization: `Bearer ${token}` },
      });
      const budgetData = await budgetRes.json();

      if (budgetRes.ok) {
        // Find if this category ID is used in any budget
        const isUsedInBudget = budgetData.some(
          budget => budget.category && String(budget.category._id) === String(categoryId)
        );

        if (isUsedInBudget) {
          setError(
            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì'
          );
          return;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏•‡∏ö
        if (
          window.confirm(
            `‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${categories.find(cat => cat._id === categoryId)?.name}"? ‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏î‡πâ‡∏ß‡∏¢`
          )
        ) {
          const res = await fetch(`http://localhost:5000/api/categories/${categoryId}`, {
            method: 'DELETE',
            headers: { Authorization: `Bearer ${token}` },
          });

          if (res.ok) {
            await fetchCategories(token);
            // If the deleted category was selected, reset to a new default
            if (formData.category === categoryId) {
              const remainingCategories = categories.filter(cat => cat.type === formData.type && cat._id !== categoryId);
              const newDefaultCat = remainingCategories[0];
              setFormData(prev => ({ ...prev, category: newDefaultCat?._id || '' }));
            }
          } else {
            const data = await res.json();
            setError(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
          }
        }
      }
    } catch (error) {
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
  };


  const selectCategory = (categoryId) => {
    setFormData(prev => ({ ...prev, category: categoryId }));
  };

  const startRecording = () => {
    if (!recognition) return;
    setIsRecording(true);
    setTranscript('');
    recognition.start();
    recognition.onresult = (event) => {
      const transcript = Array.from(event.results)
        .map((result) => result[0].transcript)
        .join('');
      setTranscript(transcript);
      parseTranscript(transcript);
    };
    recognition.onerror = (event) => {
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ' + event.error);
      setIsRecording(false);
    };
    recognition.onend = () => {
      setIsRecording(false);
    };
  };

  const stopRecording = () => {
    if (recognition) {
      recognition.stop();
      setIsRecording(false);
    }
  };

  const parseTranscript = (text) => {
    const lowerText = text.toLowerCase();
    let newFormData = { ...formData };

    const amountMatch = lowerText.match(/(\d{1,3}(,\d{3})*(\.\d+)?)/);
    if (amountMatch) {
      const rawAmount = amountMatch[0].replace(/,/g, '');
      newFormData.amount = rawAmount;
    }

    if (lowerText.includes('‡∏£‡∏±‡∏ö') || lowerText.includes('‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö')) {
      newFormData.type = 'income';
    } else if (lowerText.includes('‡∏à‡πà‡∏≤‡∏¢') || lowerText.includes('‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢')) {
      newFormData.type = 'expense';
    }

    // Find category based on the determined type
    const potentialCategory = categories.find(cat => 
        lowerText.includes(cat.name.toLowerCase()) && cat.type === newFormData.type
    );
    if (potentialCategory) {
        newFormData.category = potentialCategory._id;
    }


    const notesMatch = lowerText.match(/(‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏|‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö)\s*([\s\S]*)/);
    if (notesMatch) {
      newFormData.notes = notesMatch[2].trim();
    }

    setFormData(newFormData);
  };

  // Removed OCR handlers

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    setLoading(true);

    if (!formData.amount || parseFloat(formData.amount) <= 0) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0');
      setLoading(false);
      return;
    }

    if (!formData.category) {
        setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà');
        setLoading(false);
        return;
    }
    
    // Check if the date is in the future
    const today = new Date().toISOString().split('T')[0];
    if (formData.date > today) {
      setError('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô');
      setLoading(false);
      return;
    }

    const transactionDate = new Date(`${formData.date}T00:00:00.000+07:00`);
    if (isNaN(transactionDate.getTime())) {
      setError(`‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà ${formData.date})`);
      setLoading(false);
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const res = await fetch('http://localhost:5000/api/transactions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          ...formData,
          amount: parseFloat(formData.amount),
          date: formData.date,
        }),
      });
      const data = await res.json();
      if (!res.ok) {
        throw new Error(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
      }
      window.location.href = '/dashboard';
    } catch (error) {
      setError('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
      console.error('Error details:', error);
      setLoading(false);
    }
  };

  if (!isLoggedIn) {
    return null;
  }

  return (
    <main className="container mx-auto px-6 py-8" style={{ fontFamily: 'Noto Sans Thai, sans-serif' }}>
      <div className="bg-white rounded-2xl shadow-lg max-w-2xl mx-auto overflow-hidden">
        {/* Header bar */}
        <div className="flex items-center justify-between px-6 py-4 bg-gray-100 border-b">
          <Link href="/dashboard" className="text-[#299D91] font-semibold">Cancel</Link>
          <h2 className="text-lg font-bold text-gray-800">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö-‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</h2>
          <button form="txn-form" type="submit" className="text-[#299D91] font-semibold">Save</button>
        </div>
        {error && (
          <div className="bg-red-100 text-red-600 p-3 rounded-lg m-6 flex items-center">
            <svg className="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" />
            </svg>
            {error}
          </div>
        )}
        <form id="txn-form" onSubmit={handleSubmit} className="space-y-5 p-6">
          <div>
            <label className="block text-sm font-medium text-gray-700">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)</label>
            <input
              type="number"
              step="1"
              min="0" 
              value={formData.amount}
              onChange={(e) =>
                setFormData({
                  ...formData,
                  amount: e.target.value < 0 ? 0 : e.target.value, 
                })
              }
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#299D91] text-gray-700"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô 500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</label>
            <div className="inline-flex bg-gray-200 rounded-lg overflow-hidden">
              <button
                type="button"
                onClick={() => setFormData({ ...formData, type: 'income' })}
                className={`px-5 py-2 font-semibold ${formData.type==='income' ? 'bg-[#299D91] text-white' : 'text-gray-700'}`}
              >‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</button>
              <button
                type="button"
                onClick={() => setFormData({ ...formData, type: 'expense' })}
                className={`px-5 py-2 font-semibold ${formData.type==='expense' ? 'bg-[#299D91] text-white' : 'text-gray-700'}`}
              >‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</button>
            </div>
          </div>

          {/* üëà CORRECT USAGE OF CATEGORY POPUP COMPONENT */}
          <div>
            <label className="block text-sm font-medium text-gray-700">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</label>
            <CategoryPopup
                categories={categories}
                formData={formData}
                selectCategory={selectCategory}
                deleteCategory={deleteCategory}
                setShowAddCategoryModal={setShowAddCategoryModal}
            />
          </div>
          {/* ---------------------------------------------------- */}

          <div>
            <label className="block text-sm font-medium text-gray-700">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</label>
            <input
              type="date"
              value={formData.date}
              onChange={(e) => setFormData({ ...formData, date: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-gray-700"
              required
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
            <textarea
              value={formData.notes}
              onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
              className="w-full p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500"
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≤‡∏ô"
              rows="4"
            />
          </div>
          {isSpeechSupported && (
            <div>
              <button
                type="button"
                onClick={isRecording ? stopRecording : startRecording}
                className="w-full p-3 rounded-lg flex items-center justify-center space-x-2 transition-colors text-white"
                style={{ backgroundColor: isRecording ? '#d8c2c2' : '#00C8D2' }}
                onMouseEnter={(e) => e.currentTarget.style.backgroundColor = isRecording ? '#c0b0b0' : '#00A3B3'}
                onMouseLeave={(e) => e.currentTarget.style.backgroundColor = isRecording ? '#d8c2c2' : '#00C8D2'}
              >
                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M7 4a3 3 0 016 0v4a3 3 0 11-6 0V4zm4 10.93A7.001 7.001 0 0017 8a1 1 0 10-2 0 5 5 0 01-10 0 1 1 0 10-2 0 7.001 7.001 0 006 6.93V17a1 1 0 102 0v-2.07z" clipRule="evenodd" />
                </svg>
                <span>{isRecording ? '‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡πÄ‡∏™‡∏µ‡∏¢‡∏á'}</span>
              </button>
              {transcript && (
                <div className="mt-3 p-3 bg-gray-100 rounded-lg text-gray-700">
                  <p className="text-sm">‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: {transcript}</p>
                </div>
              )}
            </div>
          )}
          {/* Removed slip upload/OCR section for simpler UX */}
          <div className="flex space-x-4">
            <button
              type="submit"
              disabled={loading}
              className="flex-1 p-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:bg-gray-400"
            >
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...' : '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°'}
            </button>
            <Link
              href="/dashboard"
              className="flex-1 p-3 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 text-center transition-colors"
            >
              ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
            </Link>
          </div>
        </form>

        {/* Removed OCR confirmation modal */}


        {showAddCategoryModal && (
          <div
            className="fixed inset-0 flex items-center justify-center z-50 p-4 backdrop-blur-sm bg-black/20 z-50 p-4"
            onClick={() => {
              // ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≠‡∏Å popup
              setShowAddCategoryModal(false);
              setNewCategory('');
              setSelectedIcon('üçΩÔ∏è');
              setNewCategoryType('expense');
              setSelectedCategoryGroup('‡∏™‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ');
            }}
          >
            <div
              className="bg-white rounded-2xl p-8 max-w-2xl mx-auto shadow-2xl"
              onClick={(e) => e.stopPropagation()} // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î popup ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ô
            >
              <h3 className="text-2xl font-semibold text-gray-800 mb-6">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà</h3>
              <div className="space-y-6">
                <input
                  type="text"
                  value={newCategory}
                  onChange={(e) => setNewCategory(e.target.value)}
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà"
                  className="w-full p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-lg text-gray-700"
                />
                <select
                  value={selectedCategoryGroup}
                  onChange={(e) => setSelectedCategoryGroup(e.target.value)}
                  className="w-full p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-lg text-gray-700"
                >
                  {availableIcons.map((group) => (
                    <option key={group.label} value={group.label}>
                      {group.label}
                    </option>
                  ))}
                </select>
                <div className="grid grid-cols-6 gap-2 h-36 overflow-y-auto p-2 border rounded-lg">
                  {availableIcons
                    .find((group) => group.label === selectedCategoryGroup)
                    ?.value.map((icon) => (
                      <button
                        key={icon}
                        onClick={() => setSelectedIcon(icon)}
                        type="button" // Important to prevent form submission
                        className={`w-12 h-12 rounded-lg flex items-center justify-center text-3xl ${selectedIcon === icon ? 'bg-green-500 text-white' : 'bg-white hover:bg-gray-100'
                          } border border-gray-200 transition-colors shadow-sm`}
                      >
                        {icon}
                      </button>
                    ))}
                </div>
                <select
                  value={newCategoryType}
                  onChange={(e) => setNewCategoryType(e.target.value)}
                  className="w-full p-4 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-lg text-gray-700"
                >
                  <option value="income">‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö</option>
                  <option value="expense">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢</option>
                </select>
              </div>
              <div className="flex space-x-6 mt-8">
                <button
                  type="button"
                  onClick={addCategory}
                  className="flex-1 p-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-lg font-medium"
                >
                  ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setShowAddCategoryModal(false);
                    setNewCategory('');
                    setSelectedIcon('üçΩÔ∏è');
                    setNewCategoryType('expense');
                    setSelectedCategoryGroup('‡∏™‡∏≤‡∏£‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏π‡∏õ‡πÇ‡∏†‡∏Ñ');
                  }}
                  className="flex-1 p-4 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors text-lg font-medium"
                >
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                </button>
              </div>
            </div>
          </div>
        )}

      </div>
    </main>
  );
}
